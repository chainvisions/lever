// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.6;

import "./interfaces/IComptroller.sol";

/// @title Basic Leveraged Strategy
/// @author Chainvisions
/// @notice Basic leveraged strategy contract

/*
* This contract contains a skeleton implementation of a leveraged strategy. All functions that a position interacts with
* can be found here. Something to note is that the strategy is not designed to execute any functions of it's own. Instead,
* the system is designed where a "Position" that utilizes the strategy delegates calls to this contract. By themselves, strategies
* cannot be adopted by any positions. For a position to utilize a strategy, it needs to be added to the list of strategies in the Controller.
* This also prevents malicious strategies from being executed.
*/

contract Strategy {
    // This function should harvest yields generated by the
    // position and it should also liquidate these rewards
    // and compound them. This is also where you would charge
    // performance fees. These fees must be read from the Controller
    // and sent to it on harvest.
    function harvest() public {
        // This function MUST also claim XVS rewards and
        // liquidate them.

    }

    // This function should liquidate part of the
    // investment to repay BUSD debt that the position accrued.
    function liquidateAmount(uint256 _amount) public {
        require(_amount <= investment(), "Strategy: Amount must be equal to or less than the investment");
        // doSomething()
    }

    // This function should return the amount of the investment
    // held in the position.
    function investment() public view returns (uint256) {

    }

    function finalizeUpgrade() public {
        
    }

}